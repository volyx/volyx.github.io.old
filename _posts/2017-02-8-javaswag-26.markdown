---
layout:     post
title:      Javaswag выпуск 26
date:       2017-02-8
summary: 	В выпуске компилируем код на лету, пишем свой сплитератор и генерируем видео для ютьюба по статьям из википедии.
categories: javaswag
---

Привет! В выпуске компилируем код на лету, пишем свой сплитератор и генерируем видео для ютьюба по статьям из википедии.

[https://sparktutorials.github.io/2017/01/28/using-spark-with-kotlin.html](https://sparktutorials.github.io/2017/01/28/using-spark-with-kotlin.html)

**Using Spark with Kotlin to create a simple CRUD REST API**

Хороший способ познакомиться с языком Котлин - написать на нем простой веб-сервис. Библиотека Спарк хорошо подходит для этого. 10 минут и вы добавляете себе еще один язык в резюме.

[https://blog.frankel.ch/compilation-java-code-on-the-fly/#gsc.tab=0](https://blog.frankel.ch/compilation-java-code-on-the-fly/#gsc.tab=0)

**Compilation of Java code on the fly**

Знали что JVM может компилировать код программно? То есть можно загрузить класс из файла, скомпилировать его "на лету" и все, его можно использовать. В статье пример кода по загрузке класса извне и набор параметров с которым нужно запускать приложение.

[https://www.infoq.com/articles/Building-Reactive-Applications-with-Akka](https://www.infoq.com/articles/Building-Reactive-Applications-with-Akka)

**Building Reactive Applications with Akka Actors and Java 8**

Маркус Эйсель рассказывает о том, как написать распределенное приложение используя модель акторов. Познакомившись с этой моделью вы уже не сможете мыслить иначе - каждый поток будет казаться вам актором. Это очень простая и в тоже время гибкая концепция.

[https://www.airpair.com/java/posts/parallel-processing-of-io-based-data-with-java-streams](https://www.airpair.com/java/posts/parallel-processing-of-io-based-data-with-java-streams)

**Faster parallel processing in Java using Streams and a spliterator**

Автор показывает как можно написать свой "сплитератор", который будет обрабатывать файл по частям. Реализация с его сплитератором, запущенная параллельно работает в 4 раза быстрее чем, однопоточная, и предоставляет красивый декларативный апи.

[http://royvanrijn.com/blog/2017/01/vikipedia-a-java-youtube-bot/](http://royvanrijn.com/blog/2017/01/vikipedia-a-java-youtube-bot/)

**Vikipedia: A Java YouTube bot**

Автор блога написал бота, который превращает статьи из википедии в видео на ютьюбе. Интересно, что будет если сделать несколько тысяч таких ботов?

[http://making.duolingo.com/rewriting-duolingos-engine-in-scala](http://making.duolingo.com/rewriting-duolingos-engine-in-scala)

**Rewriting Duolingo's engine in Scala**

Инженеры из Дуалинго рассказывают как переписали один из сервисов с питона на скалу. Время ответа сервера сократилось с 700 миллисекунд до 14. В статье — как они пришли к этому решению.

[https://building.coursera.org/blog/2016/12/01/should-engineering-managers-write-code-wrong-question/](https://building.coursera.org/blog/2016/12/01/should-engineering-managers-write-code-wrong-question/)

**Should engineering managers write code? Wrong question.**

Не только разработчики, но и менеджеры в курсере пишут код. Но при этом не для самой курсеры, а для автоматизации своих рутинных задач. 

[https://plumbr.eu/blog/programming/processing-billions-of-eventsday](https://plumbr.eu/blog/programming/processing-billions-of-eventsday)

**Processing billions of events/day**

Инженеры из Пламбр рассказывают как декомпозировали свой монолитный сервер на несколько микросервисов. В статье — почему решили переписывать, какие были требования, к чему пришли. 

Картинка [https://twitter.com/vitalishkurenko/status/825070719356788736](https://twitter.com/vitalishkurenko/status/825070719356788736)

